- name: Validate no unexpected configuration keys
  ansible.builtin.assert:
    fail_msg: restic_repository contains unexpected keys.
    that:
      - restic_repository.keys() | difference(['path', 'password', 'type']) == []
- name: Validate required keys are defined
  ansible.builtin.assert:
    fail_msg: Specified restic_repository configuration is invalid.
    that:
      - restic_repository.path is defined
      - restic_repository.password is defined
      - restic_repository.type is defined
- name: Validate repository type is valid
  ansible.builtin.assert:
    fail_msg: Repository type is invalid.
    that:
      - restic_repository.type == "local"

- name: Create /etc/restic directory
  ansible.builtin.file:
    access_time: preserve
    modification_time: preserve
    group: root
    mode: "0550"
    owner: "{{ restic_user | default('root') }}"
    path: "/etc/restic"
    state: directory
- name: Create configuration files in /etc/restic
  ansible.builtin.template:
    dest: "/etc/restic/repository-password"
    group: root
    mode: "0440"
    owner: "{{ restic_user | default('root') }}"
    src: etc/restic/repository-password.j2

- name: Initialize restic repository, if needed
  block:
    - name: "Check if restic config exists"
      ansible.builtin.stat:
        path: "{{ restic_repository.path }}/config"
      register: restic_repository_config
      when: restic_repository is defined
    - name: Initialize restic repository
      become: "{{ restic_user is defined }}"
      become_user: "{{ restic_user | default(omit) }}"
      when: restic_repository is defined and not restic_repository_config.stat.exists
      ansible.builtin.command:
        cmd: "{{ __restic_binary_path }} init --repo {{ restic_repository.path }} --password-file /etc/restic/repository-password"
        creates: "{{ restic_repository.path }}/config"